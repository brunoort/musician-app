{"ast":null,"code":"/**\n * Module dependencies\n */\nvar Q = require('q'),\n    interfaceValidator = require('./interface-validator'),\n    inMemoryTransporter = require('./cache-transporters/in-memory-transporter');\n/**\n * Http Cache manager for requestify\n */\n\n\nvar Cache = function () {\n  'use strict';\n  /**\n   * Cache transporter instance\n   * @default inMemory\n   * @type {{ get: function, set: function, purge: function }}\n   */\n\n  var transport = inMemoryTransporter(),\n\n  /**\n   * Mandatory public methods for the transport interface\n   * @type {array}\n   */\n  transportInterface = ['get', 'set', 'purge'];\n  /**\n   * Handles transporter callback\n   * @param {Q.defer} defer\n   * @returns {Function}\n   */\n\n  function callbackHandler(defer) {\n    return function (error, data) {\n      if (error) {\n        defer.reject(error);\n        return;\n      }\n\n      if (!data) {\n        defer.resolve();\n        return;\n      }\n\n      defer.resolve(data);\n    };\n  }\n  /**\n   * Executes transport method with given params\n   * @param {string} method\n   * @param {string} url\n   * @param {{code: number, body: string, headers: object}} response\n   * @returns {Q.promise}\n   */\n\n\n  function transportExecute(method, url, response) {\n    var defer = Q.defer();\n\n    if (response) {\n      transport[method](url, response, callbackHandler(defer));\n      return defer.promise;\n    }\n\n    transport[method](url, callbackHandler(defer));\n    return defer.promise;\n  }\n\n  return {\n    /**\n     * Sets cache by resource URL\n     * @param {string} url\n     * @param {{code: number, body: string, headers: object}} response\n     * @returns {Q.promise}\n     */\n    set: function set(url, response) {\n      return transportExecute('set', url, response);\n    },\n\n    /**\n     * Returns cache by resource URL\n     * @param {string} url\n     * @returns {Q.promise}\n     */\n    get: function get(url) {\n      return transportExecute('get', url);\n    },\n\n    /**\n     * Purges a specific cache by URL\n     * @param url\n     * @returns {Q.promise}\n     */\n    purge: function purge(url) {\n      return transportExecute('purge', url);\n    },\n\n    /**\n     * Sets redis client\n     * @param {{ get: function, set: function, purge: function }} cacheTransporter\n     * @returns {Cache}\n     */\n    setCacheTransporter: function setCacheTransporter(cacheTransporter) {\n      interfaceValidator.validate('CacheTransporter', cacheTransporter, transportInterface);\n      transport = cacheTransporter;\n      return this;\n    },\n\n    /**\n     * Determines if transport is currently available for use\n     * @returns {boolean}\n     */\n    isTransportAvailable: function isTransportAvailable() {\n      return transport !== null;\n    }\n  };\n}();\n\nmodule.exports = Cache;","map":null,"metadata":{},"sourceType":"script"}