{"ast":null,"code":"/**\n * Module dependencies\n */\nvar interfaceValidator = require('./interface-validator'),\n    consoleAdapter = require('./logger-adapters/console-adapter');\n/**\n * Using the adapter pattern to log Requestify logs.\n */\n\n\nvar Logger = function () {\n  'use strict';\n  /**\n   * Current adapter - defaults to console logger\n   * @type {object}\n   */\n\n  var adapter = consoleAdapter(),\n\n  /**\n   * Interface mandatory methods to any logger adapter.\n   * @type {array}\n   */\n  adapterInterface = ['error', 'info', 'debug', 'warning'],\n\n  /**\n   * Module API to return\n   */\n  api = {},\n\n  /**\n   * Supported logging levels\n   * @type {array}\n   */\n  levels = ['error', 'warning', 'info', 'debug'],\n      currentLoggingLevel = 0;\n  /**\n   * Logs to the adapter\n   * @param {string} method\n   * @param {string|object} message\n   */\n\n  function log(method, message) {\n    if (!adapter) {\n      return;\n    }\n\n    adapter[method](message);\n  }\n  /**\n   * Create public log methods according to interface\n   */\n\n\n  adapterInterface.forEach(function (value) {\n    api[value] = function (message) {\n      log(value, message);\n    };\n  });\n  /**\n   * Sets a logger to log to. defaults to null (which means logs to no-where)\n   * @param {string|object} loggerAdapter\n   * @returns {Logger}\n   */\n\n  api.setLogger = function (loggerAdapter) {\n    interfaceValidator.validate('LoggerInterface', loggerAdapter, adapterInterface);\n    adapter = loggerAdapter;\n    return this;\n  };\n  /**\n   * Setter/getter for the logger logging level\n   * @param {number} level\n   * @returns {Logger|number}\n   */\n\n\n  api.logLevel = function (level) {\n    if (!level) {\n      return currentLoggingLevel;\n    }\n\n    if (levels[level] === undefined) {\n      throw new Error(level + ' is not a valid logging level');\n    }\n\n    currentLoggingLevel = level;\n    return this;\n  };\n\n  return api;\n}();\n\nmodule.exports = Logger;","map":null,"metadata":{},"sourceType":"script"}