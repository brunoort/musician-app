{"ast":null,"code":"'use strict';\n/**\n * Return the RedisTransporter generator\n * @param {Redis} redisInstance\n * @returns {{get: function, set: function, purge: function}}\n */\n\nmodule.exports = function (redisInstance) {\n  if (!redisInstance) {\n    throw new Error('Cannot init requestify redis transporter without redis instance');\n  }\n  /**\n   * Redis instance\n   * @type {Redis}\n   */\n\n\n  var redis = redisInstance;\n  /**\n   * Returns serialized to string version of the response object\n   * @param {{code: number, body: string, headers: object}} response\n   * @returns {string}\n   */\n\n  function serializeResponse(response) {\n    return JSON.stringify(response);\n  }\n  /**\n   * Deserialize a response string saved to redis\n   * @param {string} response\n   * @returns {object}\n   */\n\n\n  function deserializeResponse(response) {\n    return JSON.parse(response);\n  }\n  /**\n   * Callback handler\n   * @param {Function} callback\n   * @returns {Function}\n   */\n\n\n  function callbackHandler(callback) {\n    return function (error, data) {\n      if (data === 'OK') {\n        callback();\n        return;\n      }\n\n      callback(error, deserializeResponse(data));\n    };\n  }\n\n  return {\n    /**\n     * @implements Cache.get\n     * @param {string} url\n     * @param {Function} callback\n     */\n    get: function get(url, callback) {\n      redis.get(url, callbackHandler(callback));\n    },\n\n    /**\n     * @implements Cache.set\n     * @param {string} url\n     * @param {string} response\n     * @param {Function} callback\n     */\n    set: function set(url, response, callback) {\n      redis.set(url, serializeResponse(response), callbackHandler(callback));\n    },\n\n    /**\n     * @implements Cache.purge\n     * @param {string} url\n     * @param {Function} callback\n     */\n    purge: function purge(url, callback) {\n      redis.del(url, callbackHandler(callback));\n    }\n  };\n};","map":null,"metadata":{},"sourceType":"script"}