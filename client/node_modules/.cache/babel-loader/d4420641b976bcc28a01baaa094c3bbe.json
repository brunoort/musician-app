{"ast":null,"code":"'use strict';\n\nvar url = require('url'),\n    queryString = require('querystring'),\n    _ = require('underscore');\n/**\n * Constructor for the Request object\n * @param {string} url - Full endpoint URL (e.g. [protocol]://[host]/[uri]\n * @param {{ method: string, body: string|object, params: object, headers: object, dataType: string, auth: object, timeout: number, cookies: object }} options\n * @constructor\n */\n\n\nfunction Request(url, options) {\n  if (!url) {\n    throw new Error('URL must in mandatory to initialize Request object');\n  }\n\n  if (!options.method) {\n    throw new Error('Cannot execute HTTP request without specifying method');\n  }\n\n  this.url = url;\n  this.method = options.method;\n  this.body = options.body || {};\n  this.params = options.params || {};\n  this.path = options.path || null;\n  this.headers = options.headers || {};\n  this.dataType = options.dataType === undefined ? 'json' : options.dataType;\n  this.auth = options.auth || {};\n  this.cache = options.cache || {\n    cache: false,\n    expires: 3600\n  };\n  this.timeout = options.timeout || 30000;\n  this.cookies(options.cookies);\n  this.redirect = options.redirect || false;\n}\n/**\n * Returns full URL\n * @returns {string}\n */\n\n\nRequest.prototype.getFullUrl = function () {\n  return this.getProtocol() + '//' + this.getHost() + this.getUri();\n};\n/**\n * Object contains the special header generators, it's an object with header name and handling function within this object (e.g. Content-Length, Authorization, etc.)\n * @type {{ headerName: string }}\n */\n\n\nRequest.prototype.headerTransformers = {\n  'Content-Type': 'getContentType',\n  'Cookie': 'getCookiesHeader',\n  'Content-Length': 'getContentLength'\n};\n/**\n * Returns the request path option\n * @returns {string|null}\n */\n\nRequest.prototype.getPath = function () {\n  return this.path;\n};\n/**\n * Maps dataTypes to HTTP content-types\n * @type {{ dataType: string, contentType: string }}\n */\n\n\nRequest.prototype.supportedDataTypes = {\n  'json': 'application/json',\n  'form-url-encoded': 'application/x-www-form-urlencoded'\n};\n/**\n * Default headers for each request\n * @type {{ headerKey: string }}\n */\n\nRequest.prototype.defaultHeaders = {\n  'User-Agent': 'node/http-request-lib/v0.1',\n  'Accept': '*/*'\n};\n/**\n *\n * @param cookies\n * @returns {object|Request}\n */\n\nRequest.prototype.cookies = function (cookies) {\n  if (!cookies) {\n    return this.cookiesObj;\n  }\n\n  this.cookiesObj = cookies;\n  return this;\n};\n/**\n * Returns Cookie string for the request header\n * @returns {null|string}\n */\n\n\nRequest.prototype.getCookiesHeader = function () {\n  var i,\n      cookie = '',\n      cookies = this.cookies();\n\n  if (_.isEmpty(cookies)) {\n    return null;\n  }\n\n  for (i in cookies) {\n    if (cookies.hasOwnProperty(i)) {\n      cookie += i + '=' + cookies[i] + '; ';\n    }\n  }\n\n  return cookie;\n};\n/**\n * Return object of URL parsed object\n * @returns {object}\n */\n\n\nRequest.prototype.getUrlParts = function () {\n  this.urlParts = url.parse(this.url);\n\n  if (this.urlParts.host === null) {\n    throw new Error('Url is invalid');\n  }\n\n  return this.urlParts;\n};\n/**\n * Returns the current request protocol\n * @returns {string}\n */\n\n\nRequest.prototype.getProtocol = function () {\n  return this.getUrlParts().protocol;\n};\n/**\n * Returns the current request host\n * @returns {string}\n */\n\n\nRequest.prototype.getHost = function () {\n  return this.getUrlParts().hostname;\n};\n/**\n * Returns the current redirect flag\n * @returns {boolean}\n */\n\n\nRequest.prototype.getRedirect = function () {\n  return this.redirect;\n};\n/**\n * Returns the current request URI with query string\n * @returns {string}\n */\n\n\nRequest.prototype.getUri = function () {\n  var parts = this.getUrlParts(),\n      queryObject = _.extend(queryString.parse(parts.query), this.params),\n      query = '';\n\n  if (!_.isEmpty(queryObject)) {\n    query = '?' + queryString.encode(queryObject);\n  }\n\n  return parts.pathname + query;\n};\n/**\n * Returns the current request port\n * @returns {number}\n */\n\n\nRequest.prototype.getPort = function () {\n  var protocol = this.getProtocol(),\n      port = this.getUrlParts().port;\n\n  if (protocol === 'https:' && !port) {\n    return 443;\n  }\n\n  if (protocol === 'http:' && !port) {\n    return 80;\n  }\n\n  return this.getUrlParts().port;\n};\n/**\n * Returns the current request body\n * @returns {string}\n */\n\n\nRequest.prototype.getBody = function () {\n  if (this.method === 'GET' || this.method === 'HEAD') {\n    return '';\n  }\n\n  if (this.dataType === 'json') {\n    return this.getJsonBody();\n  }\n\n  if (this.dataType === 'form-url-encoded') {\n    return this.getUrlEncodedBody();\n  }\n\n  return this.body;\n};\n/**\n * Returns the body encoded to JSON\n * @returns {string}\n */\n\n\nRequest.prototype.getJsonBody = function () {\n  return JSON.stringify(this.body);\n};\n/**\n * Returns the body encoded as query string\n * @returns {string}\n */\n\n\nRequest.prototype.getUrlEncodedBody = function () {\n  return queryString.encode(this.body);\n};\n/**\n * Returns the current Request header Object\n * @returns {object}\n */\n\n\nRequest.prototype.getHeaders = function () {\n  var requestedHeaders = this.headers,\n      headers = _.clone(this.defaultHeaders),\n      generatedHeaders = this.headerTransformers,\n      i,\n      headerVal;\n\n  for (i in generatedHeaders) {\n    if (generatedHeaders.hasOwnProperty(i)) {\n      headerVal = this[generatedHeaders[i]]();\n\n      if (headerVal) {\n        headers[i] = headerVal;\n      }\n    }\n  }\n\n  _.extend(headers, requestedHeaders);\n\n  return headers;\n};\n/**\n * Returns the request body content length\n * @returns {number}\n */\n\n\nRequest.prototype.getContentLength = function () {\n  return Buffer.byteLength(this.getBody().toString());\n};\n/**\n * Returns the current request content type\n * @returns {string}\n */\n\n\nRequest.prototype.getContentType = function () {\n  if (!_.has(this.supportedDataTypes, this.dataType)) {\n    return '';\n  }\n\n  return this.supportedDataTypes[this.dataType];\n};\n/**\n * Return : separated user password\n * @returns {string|null}\n */\n\n\nRequest.prototype.getAuthorization = function () {\n  var auth = this.auth; // Allow an empty or undefined password if the username is defined\n  // Return null only if both the username and password are empty\n\n  if (!auth.username && typeof auth.password === 'undefined') {\n    return null;\n  }\n\n  return auth.username + ':' + auth.password;\n};\n\nmodule.exports = Request;","map":null,"metadata":{},"sourceType":"script"}